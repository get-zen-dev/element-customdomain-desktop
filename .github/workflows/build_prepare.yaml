# Original source: https://github.com/vector-im/element-desktop/blob/master/.github/workflows/build_prepare.yaml

# This action helps perform common actions before the build_* actions are started in parallel.
on:
    workflow_call:
        inputs:
            config:
                type: string
                required: true
                description: "The config directory to use"
            nightly:
                type: boolean
                required: false
                default: false
                description: "Whether the build is a Nightly and to calculate the version strings new builds should use"
            element-version:
                description: Version of Element to build
                required: true
                type: string
            update-policy:
                type: string
        secrets:
            # Required if `nightly` is set
            CF_R2_ACCESS_KEY_ID:
                required: false
            # Required if `nightly` is set
            CF_R2_TOKEN:
                required: false
            # Required if `nightly` is set
            CF_R2_S3_API:
                required: false                
            USER_HOMESERVER:
                required: true
            USER_UPDATE_FOLDER:
                required: true
            NAMING_APP_NAME_SUFFIX:
                required: false
            NAMING_APP_DATA_NAME_SUFFIX:
                required: false
        outputs:
            macos-version:
                description: "The version string the next macOS Nightly should use, only output for nightly"
                value: ${{ jobs.prepare.outputs.macos-version }}
            linux-version:
                description: "The version string the next Linux Nightly should use, only output for nightly"
                value: ${{ jobs.prepare.outputs.linux-version }}
            win32-x64-version:
                description: "The version string the next Windows x64 Nightly should use, only output for nightly"
                value: ${{ jobs.prepare.outputs.win32-x64-version }}
            win32-x86-version:
                description: "The version string the next Windows x86 Nightly should use, only output for nightly"
                value: ${{ jobs.prepare.outputs.win32-x86-version }}
jobs:
    prepare:
        name: Prepare
        environment: ${{ inputs.nightly && 'packages.element.io' || '' }}
        runs-on: ubuntu-latest
        outputs:
            macos-version: ${{ steps.versions.outputs.macos }}
            linux-version: ${{ steps.versions.outputs.linux }}
            win32-x64-version: ${{ steps.versions.outputs.win_x64 }}
            win32-x86-version: ${{ steps.versions.outputs.win_x86 }}
        steps:
            - uses: actions/checkout@v3

            - name: Load Element & Create Config
              run: |
                  git clone https://github.com/vector-im/element-desktop.git
                  cd element-desktop
                  git checkout master
                  git checkout ${{ inputs.element-version }}
                  cd ..

                  CONFIG_PATH="element-desktop/element.io/release/config.json"
                  
                  mkdir myconfig
                  if [[ "${{ inputs.update-policy }}" == "custom" ]]; then
                      jq '.default_server_name = "${{ secrets.USER_HOMESERVER }}"
                        | .update_base_url = "${{ secrets.USER_UPDATE_FOLDER }}"
                        ' $CONFIG_PATH > myconfig/config.json;
                      mv element-desktop/package.json element-desktop/package.json.original;
                      jq '.name = "element-desktop${{ secrets.NAMING_APP_DATA_NAME_SUFFIX }}"
                        | .productName = "Element${{ secrets.NAMING_APP_NAME_SUFFIX }}"
                        ' element-desktop/package.json.original > element-desktop/package.json;
                  fi

                  if [[ "${{ inputs.update-policy }}" == "none" ]]; then
                      jq '.default_server_name = "${{ secrets.USER_HOMESERVER }}"
                        | .update_base_url = ""
                        ' $CONFIG_PATH > myconfig/config.json;
                      mv element-desktop/package.json element-desktop/package.json.original;
                      jq '.name = "element-desktop${{ secrets.NAMING_APP_DATA_NAME_SUFFIX }}"
                        | .productName = "Element${{ secrets.NAMING_APP_NAME_SUFFIX }}"
                        ' element-desktop/package.json.original > element-desktop/package.json;
                  fi

                  mv element-desktop/* ./

            - uses: actions/setup-node@v3
              with:
                  cache: "yarn"

            - name: Install Deps
              run: "yarn install --pure-lockfile"

            - name: Fetch Element Web
              run: yarn run fetch --noverify -d myconfig ${{ inputs.element-version }}

            # We split this out to save the build_* scripts having to do it to make use of `hashFiles` in the cache action
            - name: Generate cache hash files
              run: |
                  yarn run --silent electron --version > electronVersion
                  cat package.json | jq -c .hakDependencies > hakDependencies.json

            #- name: "[Nightly] Calculate versions"
            #  id: versions
            #  if: inputs.nightly
            #  run: |
            #      MACOS=$(aws s3 cp s3://$R2_BUCKET/nightly/update/macos/releases.json - --endpoint-url $R2_URL --region auto | jq -r .currentRelease)
            #      echo "macos=$(scripts/generate-nightly-version.ts --latest $MACOS)" >> $GITHUB_OUTPUT

            #      LINUX=$(aws s3 cp s3://$R2_BUCKET/debian/dists/default/main/binary-amd64/Packages - --endpoint-url $R2_URL --region auto | grep "Package: element-nightly" -A 50 | grep Version -m1 | sed -n 's/Version: //p')
            #      echo "linux=$(scripts/generate-nightly-version.ts --latest $LINUX)" >> $GITHUB_OUTPUT

            #      WINx64=$(aws s3 cp s3://$R2_BUCKET/nightly/update/win32/x64/RELEASES - --endpoint-url $R2_URL --region auto | awk '{print $2}' | cut -d "-" -f 5 | cut -c 8-)
            #      echo "win_x64=$(scripts/generate-nightly-version.ts --latest $WINx64)" >> $GITHUB_OUTPUT
            #      WINx86=$(aws s3 cp s3://$R2_BUCKET/nightly/update/win32/ia32/RELEASES - --endpoint-url $R2_URL --region auto | awk '{print $2}' | cut -d "-" -f 5 | cut -c 8-)
            #      echo "win_x86=$(scripts/generate-nightly-version.ts --latest $WINx86)" >> $GITHUB_OUTPUT
            #  env:
            #      AWS_ACCESS_KEY_ID: ${{ secrets.CF_R2_ACCESS_KEY_ID }}
            #      AWS_SECRET_ACCESS_KEY: ${{ secrets.CF_R2_TOKEN }}
            #      R2_BUCKET: "packages-element-io"
            #      R2_URL: ${{ secrets.CF_R2_S3_API }}

            - name: Check version
              id: package
              run: |
                  echo "version=$(cat package.json | jq -r .version)" >> $GITHUB_OUTPUT

            #- name: "[Release] Fetch release"
            #  id: release
            #  if: ${{ !inputs.nightly && inputs.version != 'develop' }}
            #  uses: cardinalby/git-get-release-action@cedef2faf69cb7c55b285bad07688d04430b7ada # v1
            #  env:
            #      GITHUB_TOKEN: ${{ github.token }}
            #  with:
            #      tag: v${{ steps.package.outputs.version }}

            #- name: "[Release] Write changelog"
            #  if: ${{ !inputs.nightly && inputs.version != 'develop' }}
            #  run: |
            #      TIME=$(date -d "$PUBLISHED_AT" -R)
            #      echo "element-desktop ($VERSION) default; urgency=medium" >> changelog.Debian
            #      echo "$BODY" | sed 's/^##/\n  */g;s/^\*/  */g' | perl -pe 's/\[.+?]\((.+?)\)/\1/g' >> changelog.Debian
            #      echo "" >> changelog.Debian
            #      echo " -- ${{ github.actor }} <support@element.io>  $TIME" >> changelog.Debian
            #  env:
            #      VERSION: v${{ steps.package.outputs.version }}
            #      BODY: ${{ steps.release.outputs.body }}
            #      PUBLISHED_AT: ${{ steps.release.outputs.published_at }}

            - uses: actions/upload-artifact@v3
              with:
                  name: webapp
                  retention-days: 1
                  path: |
                      webapp.asar
                      package.json
                      electronVersion
                      hakDependencies.json
                      changelog.Debian
